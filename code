WHITE = 1
BLACK = 2


def correct_coords(row, col):
    return 0 <= row < 8 and 0 <= col < 8


def opponent(color):
    if color == WHITE:
        return BLACK
    return WHITE


def main():
    board = Board()
    while True:
        print(board)
        print("Команды:")
        print("    exit                               -- выход")
        print("    move <row> <col> <row1> <col1>     -- ход из клетки (row, col)")
        print("                                          в клетку (row1, col1)")
        if board.current_player_color() == WHITE:
            print("Ход белых:")
        else:
            print("Ход черных:")
        command = input()
        if command == "exit":
            break
        move_type, row, col, row1, col1 = command.split()
        row, col, row1, col1 = int(row), int(col), int(row1), int(col1)
        if board.move_piece(row, col, row1, col1):
            print("Ход успешен")
        else:
            print("Координаты некорректы! Попробуйте другой ход!")


class Figure:
    def __init__(self, row: int, col: int, color: int):
        self.row = row
        self.col = col
        self.color = color

    def set_position(self, row, col):
        self.row = row
        self.col = col

    def char(self):
        return self.__class__.__name__[0]

    def get_color(self):
        return self.color


class Rook(Figure):

    def can_move(self, row, col):
        if self.row != row and self.col != col:
            return False

        return True


class Knight(Figure):

    def char(self):
        return "N"

    def can_move(self, row, col):
        if not (7 >= row >= 0) or not (7 >= col >= 0):
            return False

        if not (
            abs(self.row - row) == 1
            and abs(self.col - col) == 2
            or abs(self.row - row) == 2
            and abs(self.col - col) == 1
        ):
            return False

        return True


class Bishop(Figure):

    def can_move(self, row, col):
        if not (7 >= row >= 0) or not (7 >= col >= 0):
            return False

        if not (abs(self.row - row) == abs(self.col - col)):
            return False

        return True


class Queen(Figure):

    def can_move(self, row, col):
        if not (7 >= row >= 0) or not (7 >= col >= 0):
            return False

        if not (abs(self.row - row) == abs(self.col - col)) and self.row != row and self.col != col:
            return False

        return True


class Pawn(Figure):

    def can_move(self, row, col):

        if self.col != col:
            return False

        if self.color == WHITE:
            direction = 1
            start_row = 1
        else:
            direction = -1
            start_row = 6

        if self.row + direction == row:
            return True

        if self.row == start_row and self.row + 2 * direction == row:
            return True

        return False


class King(Figure):

    def can_move(self, row, col):
        if not (7 >= row >= 0) or not (7 >= col >= 0):
            return False

        if not (
            (
                abs(self.row - row) == 1
                and abs(self.col - col) == 1
                or abs(self.row - row) == 0
                and abs(self.col - col) == 1
                or abs(self.row - row) == 1
                and abs(self.col - col) == 0
            )
        ):
            return False

        return True


class Board:
    def __init__(self):
        self.color = WHITE
        self.field = []
        for row in range(8):
            self.field.append([None] * 8)
        for i in range(1, 3):
            for j in range(8):
                pn = Pawn(1 + (i - 1) * 5, j, i)
                self.field[1 + (i - 1) * 5][j] = pn
            for j in range(1, 3):
                rc = Rook((i - 1) * 7, (j - 1) * 7, i)
                kn = Knight((i - 1) * 7, (j - 1) * 5 + 1, i)
                bs = Bishop((i - 1) * 7, (j - 1) * 3 + 2, i)
                self.field[(i - 1) * 7][(j - 1) * 7] = rc
                self.field[(i - 1) * 7][(j - 1) * 5 + 1] = kn
                self.field[(i - 1) * 7][(j - 1) * 3 + 2] = bs
            qn = Queen((i - 1) * 7, 3, i)
            kg = King((i - 1) * 7, 4, i)
            self.field[(i - 1) * 7][3] = qn
            self.field[(i - 1) * 7][4] = kg

    def current_player_color(self):
        return self.color

    def cell(self, row, col):
        piece = self.field[row][col]
        if piece is None:
            return "  "
        color = piece.get_color()
        c = "w" if color == WHITE else "b"
        return c + piece.char()

    def move_piece(self, row, col, row1, col1):

        if not correct_coords(row, col) or not correct_coords(row1, col1):
            return False
        if row == row1 and col == col1:
            return False
        piece = self.field[row][col]
        if self.field[row][col] is None:
            return False
        if piece.get_color() != self.color:
            return False

        if self.field[row1][col1] is not None:
            if self.field[row1][col1].get_color() == self.color:
                return False
            if (
                isinstance(piece, Pawn)
                and self.field[row1][col1].get_color() != self.color
                and (
                    row - row1 == -1
                    and abs(col - col1) == 1
                    and piece.get_color() == WHITE == self.color
                    or row - row1 == 1
                    and abs(col - col1) == 1
                    and piece.get_color() == BLACK == self.color
                )
            ):
                self.field[row][col] = None
                self.field[row1][col1] = piece
                piece.set_position(row1, col1)
                self.color = opponent(self.color)
                print(
                    isinstance(piece, Pawn) and self.field[row1][col1].get_color() != self.color,
                    row - row1 == 1
                    and abs(col - col1) == 1
                    and piece.get_color() == 1
                    or row - row1 == -1
                    and abs(col - col1) == 1
                    and piece.get_color() == 2,
                )
                return True
            return False
        if not piece.can_move(row1, col1):
            return False

        self.field[row][col] = None
        self.field[row1][col1] = piece
        piece.set_position(row1, col1)
        self.color = opponent(self.color)
        return True

    def is_under_attack(self, row: int, col: int, color: int):
        for i in range(8):
            for j in range(8):
                if self.field[i][j] is not None:
                    piece = self.field[i][j]
                    if piece.get_color() == color and piece.can_move(row, col):
                        return True

    def print_board(self):
        print("     +----+----+----+----+----+----+----+----+")
        for row in range(7, -1, -1):
            print(" ", row, end="  ")
            for col in range(8):
                print("|", self.cell(row, col), end=" ")
            print("|")
            print("     +----+----+----+----+----+----+----+----+")
        print(end="        ")
        for col in range(8):
            print(col, end="    ")
        print()

    def __str__(self):
        result = ""
        result = "     +----+----+----+----+----+----+----+----+\n"
        for row in range(7, -1, -1):
            result += f"  {row}  "
            for col in range(8):
                result += f"| {self.cell(row, col)} "
            result += "|\n"
            result += "     +----+----+----+----+----+----+----+----+\n"
        result += "        "
        for col in range(8):
            result += f"{col}    "
        result += "\n"
        return result

main()
